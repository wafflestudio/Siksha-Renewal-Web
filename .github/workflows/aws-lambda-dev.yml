name: Lambda Deploy Dev

on:
  push:
    branches: ["dev/master"]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Setup node version
        uses: actions/setup-node@v3
        with:
          node-version: 22.11.0

      - name: .env setting
        run: |
          echo "NEXT_PUBLIC_KAKAO_RESTAPI=${{ secrets.NEXT_PUBLIC_KAKAO_RESTAPI }}" >> .env
          echo "NEXT_PUBLIC_KAKAO_REDIRECTURI=${{ secrets.NEXT_PUBLIC_KAKAO_REDIRECTURI_DEV }}" >> .env
          echo "NEXT_PUBLIC_KAKAOMAP_RESTAPI=${{ secrets.NEXT_PUBLIC_KAKAOMAP_RESTAPI }}" >> .env
          echo "NEXT_PUBLIC_GOOGLE_CLIENTID=${{ secrets.NEXT_PUBLIC_GOOGLE_CLIENTID }}" >> .env
          echo "NEXT_PUBLIC_GOOGLE_SECRET=${{ secrets.NEXT_PUBLIC_GOOGLE_SECRET }}" >> .env
          echo "NEXT_PUBLIC_GOOGLE_REDIRECTURI=${{ secrets.NEXT_PUBLIC_GOOGLE_REDIRECTURI_DEV }}" >> .env
          echo "NEXT_PUBLIC_APPLE_CLIENTID=${{ secrets.NEXT_PUBLIC_APPLE_CLIENTID }}" >> .env
          echo "NEXT_PUBLIC_APPLE_SECRET=${{ secrets.NEXT_PUBLIC_APPLE_SECRET }}" >> .env
          echo "NEXT_PUBLIC_APPLE_REDIRECTURI=${{ secrets.NEXT_PUBLIC_APPLE_REDIRECTURI_DEV }}" >> .env
          echo "NEXT_PUBLIC_MIXPANEL_TOKEN=${{ secrets.NEXT_PUBLIC_MIXPANEL_TOKEN_DEV }}" >> .env

    
      - name: Log in to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

          # AWS_ACCOUNT_ID -> 12자리 숫자 
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PASSWORD=$(aws ecr get-login-password --region ${{ secrets.AWS_REGION }})
          docker login --username AWS --password-stdin "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com" <<< "$PASSWORD"
      - name: Build Docker image

      # ECR_REPOSITORY -> 리포지토리 이름(ex: siksha/distribtion) 
        run: |
          docker build \
            --build-arg ENV_MODE=development \
            -f .dockerfile \
            -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_REPOSITORY_DEV }}:latest .
      - name: Push Docker image to Amazon ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_REPOSITORY_DEV }}:latest
      - name: Update Lambda Function
        run: |
          aws lambda update-function-code \
            --function-name ${{ secrets.AWS_LAMBDA_FUNCTION_NAME_DEV }} \
            --image-uri ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_REPOSITORY_DEV }}:latest
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_LAMBDA_FUNCTION_NAME_DEV: ${{ secrets.AWS_LAMBDA_FUNCTION_NAME_DEV }}

      - name: Clean Up Old ECR Images
        run: |
          aws ecr list-images \
            --repository-name ${{ secrets.AWS_ECR_REPOSITORY_DEV }} \
            --region ${{ secrets.AWS_REGION }} \
            --query 'imageIds[?imageTag!=`latest`]' \
            --output json | jq -c '.[]' | while read image; do
              aws ecr batch-delete-image \
                --repository-name ${{ secrets.AWS_ECR_REPOSITORY_DEV }} \
                --region ${{ secrets.AWS_REGION }} \
                --image-ids "$image"
            done
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
