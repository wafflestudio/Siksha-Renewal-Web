name: Deploy Prod

on:
  push:
    branches: ["prod"]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Setup node version
        uses: actions/setup-node@v3
        with:
          node-version: 18.20.4

      - name: .env setting
        run: |
          echo "NEXT_PUBLIC_KAKAO_RESTAPI=${{ secrets.NEXT_PUBLIC_KAKAO_RESTAPI }}" >> .env
          echo "NEXT_PUBLIC_KAKAO_REDIRECTURI=${{ secrets.NEXT_PUBLIC_KAKAO_REDIRECTURI_PROD }}" >> .env
          echo "NEXT_PUBLIC_GOOGLE_CLIENTID=${{ secrets.NEXT_PUBLIC_GOOGLE_CLIENTID }}" >> .env
          echo "NEXT_PUBLIC_GOOGLE_SECRET=${{ secrets.NEXT_PUBLIC_GOOGLE_SECRET }}" >> .env
          echo "NEXT_PUBLIC_GOOGLE_REDIRECTURI=${{ secrets.NEXT_PUBLIC_GOOGLE_REDIRECTURI_PROD }}" >> .env
          echo "NEXT_PUBLIC_APPLE_CLIENTID=${{ secrets.NEXT_PUBLIC_APPLE_CLIENTID }}" >> .env
          echo "NEXT_PUBLIC_APPLE_SECRET=${{ secrets.NEXT_PUBLIC_APPLE_SECRET }}" >> .env
          echo "NEXT_PUBLIC_APPLE_REDIRECTURI=${{ secrets.NEXT_PUBLIC_APPLE_REDIRECTURI_PROD }}" >> .env

        
      - name: Install dependencies
        run: yarn install
        
      - name: Build
        run: yarn build

      - name: S3 Deploy
        run: aws s3 sync ./out s3://siksha.wafflestudio.com/ --acl bucket-owner-full-control
        env: 
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "ap-northeast-2"

      - name: Compress Lambda Function
        run: zip -r serverless.zip ./serverless/index.js # 모듈 설치시 "./serverless/node_modules" 추가
  
      - name: Deploy Lambda function
        run: |
          aws lambda update-function-code --function-name $LAMBDA_NAME_ROUTE --zip-file fileb://serverless.zip
          aws lambda publish-version --function-name $LAMBDA_NAME_ROUTE --query 'Version'
        env: 
          LAMBDA_NAME_ROUTE: ${{ secrets.AWS_LAMBDA_NAME_ROUTE }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-1"  # Lambda@Edge는 us-east-1 리전에서만 사용가능.
      
      - name: Update Cloudfront Distribution
        run: |
          LAMBDA_ARN=$(aws lambda get-function --function-name $LAMBDA_NAME_ROUTE --query 'Configuration.FunctionArn')
          aws cloudfront update-distribution --id $DISTRIBUTION --default-cache-behavior '{"LambdaFunctionAssociations": {"Quantity": 1, "Items": [{"EventType": "origin-request", "LambdaFunctionARN": $LAMBDA_ARN}]}}'
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION --paths $PATHS
        env:
          LAMBDA_NAME_ROUTE: ${{ secrets.AWS_LAMBDA_NAME_ROUTE }}
          DISTRIBUTION: ${{ secrets.AWS_CF_DISTRIBUTION }}
          PATHS: "/*"
          AWS_REGION: "us-east-1" # Lambda@Edge는 us-east-1 리전에서만 사용가능.
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

